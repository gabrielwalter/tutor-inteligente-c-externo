import authRoutes from './server/routes/auth.js';
import progressRoutes from './server/routes/progress.js';
import adminRoutes from './server/routes/admin.js';
import db from './server/db.js';
import express from 'express';
import path from 'path';
import { GoogleGenerativeAI } from '@google/generative-ai';
import 'dotenv/config';
import showdown from 'showdown';

const app = express();
const converter = new showdown.Converter();
const __dirname = path.resolve();

app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public')));

app.use('/auth', authRoutes);
app.use('/api/progress', progressRoutes);
app.use('/admin', adminRoutes);

// Verificar se a API key est√° configurada
if (!process.env.GEMINI_API_KEY) {
    console.error('‚ùå GEMINI_API_KEY n√£o est√° configurada!');
    console.error('Configure a vari√°vel de ambiente GEMINI_API_KEY');
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Fun√ß√£o auxiliar para limpar JSON retornado pelo Gemini
function cleanJsonResponse(text) {
    let cleaned = text.trim();
    if (cleaned.startsWith('```json')) {
        cleaned = cleaned.replace(/^```json\s*/i, '').replace(/```\s*$/, '');
    } else if (cleaned.startsWith('```')) {
        cleaned = cleaned.replace(/^```\s*/, '').replace(/```\s*$/, '');
    }
    return cleaned.trim();
}

async function callGemini(systemPrompt, userPrompt, expectJson = true) {
    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-2.5-flash",
            systemInstruction: systemPrompt,
        });

        const generationConfig = expectJson ? { responseMimeType: "application/json" } : {};
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout: Gemini API demorou mais de 30 segundos')), 30000);
        });
        
        const apiPromise = model.generateContent(userPrompt, generationConfig);
        const result = await Promise.race([apiPromise, timeoutPromise]);
        
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error('‚ùå Erro na chamada Gemini API:', error.message);
        throw error;
    }
}

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development'
    });
});

// Endpoint para gerar exerc√≠cios - MELHORADO
app.post('/api/generate-exercise', async (req, res) => {
    try {
        const { topicName, difficulty = 'normal' } = req.body;
        
        if (!topicName || typeof topicName !== 'string' || topicName.trim().length === 0) {
            return res.status(400).json({ error: 'topicName √© obrigat√≥rio e deve ser uma string n√£o vazia' });
        }
        
        const validDifficulties = ['easy', 'normal', 'hard'];
        if (!validDifficulties.includes(difficulty)) {
            return res.status(400).json({ error: 'difficulty deve ser: easy, normal ou hard' });
        }

        const difficultyMap = {
            'easy': 'iniciante (conceitos b√°sicos, entrada/sa√≠da simples)',
            'normal': 'intermedi√°rio (l√≥gica moderada, m√∫ltiplas estruturas)',
            'hard': 'avan√ßado (requer racioc√≠nio complexo, otimiza√ß√£o)'
        };

        const systemPrompt = `Voc√™ √© um gerador pedag√≥gico de exerc√≠cios de programa√ß√£o em C.

**Objetivo**: Criar um exerc√≠cio sobre "${topicName}" com n√≠vel ${difficultyMap[difficulty]}.

**Diretrizes Pedag√≥gicas**:
1. O enunciado deve ser CLARO e COMPLETO:
   - Especificar exatamente o que deve ser lido (tipo e quantidade de entradas)
   - Especificar exatamente o que deve ser impresso (formato da sa√≠da)
   - Incluir exemplos de entrada e sa√≠da
   - Mencionar restri√ß√µes (se houver)

2. O exerc√≠cio deve FOCAR no t√≥pico solicitado:
   - Para "Estruturas Condicionais": usar if/else, operadores l√≥gicos
   - Para "Loops": exigir while ou for
   - Para "Fun√ß√µes": requerer cria√ß√£o de fun√ß√£o(√µes)
   - Para "Vetores": trabalhar com arrays
   - Para "Ponteiros": usar passagem por refer√™ncia ou manipula√ß√£o de endere√ßos

3. **CR√çTICO - O prot√≥tipo deve ser APENAS um ESQUELETO VAZIO:**
   - Incluir SOMENTE: #include <stdio.h>, int main() e return 0
   - Adicionar coment√°rios // TODO: para guiar o aluno
   - N√ÉO incluir NENHUMA vari√°vel declarada
   - N√ÉO incluir NENHUM scanf, printf, if, for, while ou qualquer l√≥gica
   - Deixar o corpo do main completamente vazio exceto pelos coment√°rios TODO

4. **Estrutura do prot√≥tipo:**
   Linha 1: #include <stdio.h>
   Linha 2: (vazia)
   Linha 3: int main() {
   Linha 4: (4 espa√ßos) // TODO: Declare as vari√°veis necess√°rias
   Linha 5: (vazia)
   Linha 6: (4 espa√ßos) // TODO: Leia os dados de entrada
   Linha 7: (vazia)
   Linha 8: (4 espa√ßos) // TODO: Processe os dados conforme o enunciado
   Linha 9: (vazia)
   Linha 10: (4 espa√ßos) // TODO: Imprima o resultado
   Linha 11: (vazia)
   Linha 12: (4 espa√ßos) return 0;
   Linha 13: }

Responda APENAS com JSON v√°lido no formato: 
{
  "enunciado": "descri√ß√£o completa do problema com exemplos",
  "prototipo": "c√≥digo esqueleto conforme estrutura acima"
}`;

        const userPrompt = `Gere um exerc√≠cio pr√°tico sobre ${topicName} (n√≠vel: ${difficulty}).`;
        
        const responseText = await callGemini(systemPrompt, userPrompt, true);
        const cleanedText = cleanJsonResponse(responseText);
        const result = JSON.parse(cleanedText);
        res.json(result);
    } catch (error) {
        console.error('Erro em /api/generate-exercise:', error);
        res.status(500).json({ error: error.message || 'Erro interno do servidor' });
    }
});

// Endpoint para analisar plano LEPEBES - MUITO MELHORADO
app.post('/api/analyze-plan', async (req, res) => {
    try {
        const { exercise, lepeesData } = req.body;
        
        if (!exercise || typeof exercise !== 'string' || exercise.trim().length === 0) {
            return res.status(400).json({ error: 'exercise √© obrigat√≥rio e deve ser uma string n√£o vazia' });
        }
        
        if (!lepeesData || typeof lepeesData !== 'object') {
            return res.status(400).json({ error: 'lepeesData √© obrigat√≥rio e deve ser um objeto' });
        }

        const systemPrompt = `Voc√™ √© um tutor pedag√≥gico especializado em ensinar programa√ß√£o em C usando o m√©todo LEPEBES.

**Seu objetivo**: Analisar DETALHADAMENTE cada etapa do planejamento do aluno e identificar se ele est√° REALMENTE pronto para codificar.

**An√°lise por Etapa**:

üìñ **L - Ler**: 
- Verificar se marcou que leu o problema
- Se N√ÉO marcou: alertar educadamente

üß† **E - Entender**: 
- O aluno identificou TODAS as entradas (tipo e quantidade)?
- O aluno identificou TODAS as sa√≠das (o que imprimir e como)?
- O aluno entendeu as regras/restri√ß√µes do problema?
- Se algo est√° VAGO ou FALTANDO: indique ESPECIFICAMENTE o que est√° ausente
- Use perguntas socr√°ticas: "Voc√™ identificou quantos n√∫meros ser√£o lidos?"

üìù **P - Portugu√™s (pseudoc√≥digo)**:
- O pseudoc√≥digo est√° em PORTUGU√äS CLARO (n√£o "C disfar√ßado")?
- Est√° LINHA POR LINHA (cada passo separado)?
- A l√≥gica faz sentido e resolve o problema?
- Se est√° confuso: sugira como reescrever SEM dar a resposta pronta

üèóÔ∏è **E - Estrutura**:
- O aluno identificou as VARI√ÅVEIS necess√°rias e seus TIPOS?
- O aluno indicou quais ESTRUTURAS usar (if/while/for/fun√ß√£o)?
- Se algo est√° faltando: pergunte "Voc√™ vai precisar de um contador? De que tipo?"

üé§ **B - Britney Spears**:
- Sempre elogiar por ter chegado at√© aqui!
- Refor√ßar que respirar √© importante antes de codificar

ü¶¥ **Es - Esqueleto**:
- Tem a estrutura b√°sica (#include <stdio.h>, int main(), return 0)?
- Os nomes das vari√°veis fazem sentido?
- Est√° esbo√ßado de forma que ajude na codifica√ß√£o?

**Estilo de Feedback**:
- Use emojis para deixar amig√°vel
- Seja ESPEC√çFICO sobre o que falta
- Use PERGUNTAS SOCR√ÅTICAS em vez de dar respostas prontas
- Elogie o que est√° BOM antes de apontar melhorias
- Seja encorajador, nunca desencorajador

**Crit√©rio para readyToCode**:
- TRUE: Todas as etapas est√£o completas e bem pensadas
- FALSE: Falta algo essencial ou h√° confus√£o conceitual

Responda APENAS com JSON v√°lido no formato: 
{
  "feedback": "an√°lise detalhada em markdown com emojis",
  "readyToCode": boolean
}`;

        const userPrompt = `**Exerc√≠cio**: "${exercise}"

**Planejamento do aluno (LEPEBES)**:
${JSON.stringify(lepeesData, null, 2)}

Analise detalhadamente cada etapa e d√™ feedback construtivo.`;

        const responseText = await callGemini(systemPrompt, userPrompt, true);
        const cleanedText = cleanJsonResponse(responseText);
        const result = JSON.parse(cleanedText);
        res.json({ feedbackHtml: converter.makeHtml(result.feedback), readyToCode: result.readyToCode });
    } catch (error) {
        console.error('Erro em /api/analyze-plan:', error);
        res.status(500).json({ error: error.message || 'Erro interno do servidor' });
    }
});

// Endpoint para analisar c√≥digo - MUITO MELHORADO
app.post('/api/analyze-code', async (req, res) => {
    try {
        const { exercise, code, history } = req.body;
        
        if (!exercise || typeof exercise !== 'string' || exercise.trim().length === 0) {
            return res.status(400).json({ error: 'exercise √© obrigat√≥rio e deve ser uma string n√£o vazia' });
        }
        
        if (!code || typeof code !== 'string' || code.trim().length === 0) {
            return res.status(400).json({ error: 'code √© obrigat√≥rio e deve ser uma string n√£o vazia' });
        }
        
        if (!history || !Array.isArray(history)) {
            return res.status(400).json({ error: 'history √© obrigat√≥rio e deve ser um array' });
        }

        const systemPrompt = `Voc√™ √© um tutor pedag√≥gico especializado em an√°lise de c√≥digo C.

**Seu objetivo**: Identificar o TIPO de erro do aluno e dar feedback personalizado baseado nisso.

**Tipos de Erro (identifique qual √©)**:

1. üß† **Erro Conceitual**: O aluno n√£o entendeu o problema
   - Exemplo: l√™ a quantidade errada de n√∫meros, imprime o que n√£o foi pedido
   - A√ß√£o: Voltar ao LEPEBES etapa E (Entender)
   
2. üîÄ **Erro L√≥gico**: O aluno entendeu o problema mas implementou a l√≥gica errada
   - Exemplo: usa for quando deveria usar while, condi√ß√£o do if invertida
   - A√ß√£o: Perguntas socr√°ticas sobre a l√≥gica

3. ‚öôÔ∏è **Erro Sint√°tico**: O aluno sabe a l√≥gica mas errou a sintaxe de C
   - Exemplo: esqueceu ponto-e-v√≠rgula, scanf sem &, printf com formato errado
   - A√ß√£o: Corrigir diretamente apontando a sintaxe correta

**An√°lise do Hist√≥rico**:
- Se √© uma RESUBMISS√ÉO: ELOGIE as corre√ß√µes feitas!
- Foque APENAS nos erros que ainda permanecem
- Seja progressivamente mais direto se o aluno estiver travado

**Estilo de Feedback**:
- Use linguagem AMIG√ÅVEL e ENCORAJADORA
- Destaque o que est√° CORRETO antes de apontar erros
- Para erros l√≥gicos: fa√ßa PERGUNTAS que guiem o aluno
  ‚ùå "Seu loop est√° errado"
  ‚úÖ "Observe sua condi√ß√£o do while. Quando i=5, a condi√ß√£o ser√° verdadeira ou falsa? Isso vai executar o bloco?"
- Para erros sint√°ticos: seja DIRETO
  ‚úÖ "Falta o & antes de 'numero' no scanf. Deve ser: scanf('%d', &numero);"

**Avalia√ß√£o do Dom√≠nio**:
- **REDO**: Erros conceituais graves OU muitos erros l√≥gicos
  - Message: "Vamos revisar o planejamento! Volte ao LEPEBES para reorganizar as ideias."
  
- **REINFORCE**: Erros pontuais mas aluno demonstra entendimento parcial
  - Message: "Voc√™ est√° no caminho certo! Pratique mais com um exerc√≠cio similar."
  
- **PROCEED**: C√≥digo correto ou apenas pequenos detalhes
  - Message: "Excelente! Voc√™ dominou este t√≥pico. Pronto para um desafio maior?"

**IMPORTANTE**: 
- Sempre identifique o topicName e topicId baseado no tipo de exerc√≠cio
- Seja espec√≠fico sobre qual conceito precisa ser refor√ßado

Responda APENAS com JSON v√°lido no formato: 
{
  "feedback": "an√°lise detalhada em markdown",
  "assessment": {
    "nextAction": "REDO | REINFORCE | PROCEED",
    "message": "mensagem encorajadora",
    "topicName": "nome do t√≥pico",
    "topicId": "id do t√≥pico (estruturasCondicionais, loops, funcoes, etc)"
  }
}`;

        const userPrompt = `**Contexto da conversa**: ${JSON.stringify(history)}

**Exerc√≠cio**: "${exercise}"

**C√≥digo do aluno (vers√£o atual)**:
\`\`\`c
${code}
\`\`\`

Analise o c√≥digo identificando o TIPO de erro e d√™ feedback personalizado.`;

        const responseText = await callGemini(systemPrompt, userPrompt, true);
        const cleanedText = cleanJsonResponse(responseText);
        const result = JSON.parse(cleanedText);
        res.json({ feedbackHtml: converter.makeHtml(result.feedback), assessment: result.assessment });
    } catch (error) {
        console.error('Erro em /api/analyze-code:', error);
        res.status(500).json({ error: error.message || 'Erro interno do servidor' });
    }
});

// Endpoint para chat - MELHORADO
app.post('/api/chat', async (req, res) => {
    try {
        const { history } = req.body;
        
        if (!history || !Array.isArray(history)) {
            return res.status(400).json({ error: 'history √© obrigat√≥rio e deve ser um array' });
        }

        const systemPrompt = `Voc√™ √© um tutor amig√°vel respondendo d√∫vidas sobre programa√ß√£o em C.

**Estilo de resposta**:
- CONCISO mas COMPLETO
- Use EXEMPLOS quando apropriado
- Se o aluno est√° confuso sobre um conceito, use ANALOGIAS do dia a dia
- Se est√° perguntando sobre um erro espec√≠fico, mostre o ANTES e DEPOIS
- Sempre ENCORAJE o aluno

**Evite**:
- Respostas longas demais
- Jarg√£o t√©cnico desnecess√°rio
- Dar c√≥digo completo sem explica√ß√£o

**Priorize**:
- Fazer o aluno PENSAR com perguntas
- Dar DICAS em vez de respostas completas
- Explicar o "POR QU√ä" por tr√°s das solu√ß√µes`;

        const userPrompt = JSON.stringify(history);
        const responseText = await callGemini(systemPrompt, userPrompt, false);
        res.json({ replyHtml: converter.makeHtml(responseText) });
    } catch (error) {
        console.error('Erro em /api/chat:', error);
        res.status(500).json({ error: error.message || 'Erro interno do servidor' });
    }
});

const PORT = process.env.PORT || 8000;

app.listen(PORT, () => {
  console.log('üöÄ ====== TUTOR INTELIGENTE DE C ======');
  console.log(`‚úÖ Servidor rodando na porta: ${PORT}`);
  console.log(`üå± Ambiente: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üß† API Key configurada: ${process.env.GEMINI_API_KEY ? 'Sim' : 'N√£o'}`);
  console.log('üß© Acesse o navegador para come√ßar a usar!');
  console.log('üé§ M√©todo LEPEBES com Britney Spears ativado!');
  console.log('=========================================');
});

